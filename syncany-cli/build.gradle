apply plugin: 'java'
apply plugin: 'eclipse'

import java.io.File;

dependencies {
	compile			project(":syncany-lib")
	compile			project(":syncany-util")
	compile			"net.sf.jopt-simple:jopt-simple:4.5"      

	testCompile		"com.github.stefanbirkner:system-rules:1.5.0"            
      	
	testCompile		project(path: ":syncany-lib", configuration: "tests")
	testCompile		project(path: ":syncany-util", configuration: "tests")
	testCompile		"junit:junit:4.9"   	      
}


// Application Plugin Settings and Hooks ///////////////////////////////////////	

apply plugin: "application"

applicationName = "syncany"
mainClassName = "org.syncany.Syncany"

startScripts {
	defaultJvmOpts = [ "-Xmx1024m", "-Dfile.encoding=utf-8" ]
	
	doLast {
		def winFile = file getWindowsScript()
		def unixFile = file getUnixScript()

		winFile.text = winFile.text.replaceAll("(set CLASSPATH=.+)", 'set CLASSPATH=%APP_HOME%\\\\lib\\\\*;%AppData%\\\\Syncany\\\\plugins\\\\*')
		unixFile.text = unixFile.text.replaceAll("(CLASSPATH=\\\$APP_HOME.+)", 'CLASSPATH=\\\$APP_HOME/lib/*:~/.config/syncany/plugins/*')
		
		// Post Java process commands: Delayed plugin JAR file deletion (Windows only)
		String winPurgeFileDeletionCommands = "@rem Delete plugin JARs\r\n"
		winPurgeFileDeletionCommands += "SET PURGEFILE=%AppData%\\\\Syncany\\\\purgefile\r\n";
		winPurgeFileDeletionCommands += "if exist %PURGEFILE% (\r\n";
		winPurgeFileDeletionCommands += "  @for /f %%b in (%PURGEFILE%) do del /q \"%%b\" 2>NUL\r\n";
		winPurgeFileDeletionCommands += "  del /q %PURGEFILE% 2>NUL\r\n";
		winPurgeFileDeletionCommands += ")\r\n\r\n";
		
		winFile.text = winFile.text.replaceAll("(:end)", "${winPurgeFileDeletionCommands}:end")
	}
}

applicationDistribution.from("${rootProject.projectDir}/") {
	include "AUTHORS.md", "CHANGELOG.md", "LICENSE.md", "README.md"
}

distTar {
	baseName = "syncany"
	version = "$applicationVersionFull"
	compression = Compression.GZIP
	extension = "tar.gz"	
}

distZip {
	baseName = "syncany"
	version = "$applicationVersionFull"
}

// Packaging ///////////////////////////////////////////////////////////////////

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "com.kenshoo:gradle-fpm:0.4"
	}
}

apply plugin: "fpm-packaging"

packaging {
	dependencies = ["openjdk-7-jre"] 
	baseDir = "${buildDir}/install/${applicationName}"
	prefix = "/usr/lib/syncany"
	extraOptions = [ 
		"--name": "syncany", 
		"--architecture": "all",
		"--license": "GPLv2",
		"--version": "${applicationVersionFull}",
		"--maintainer": "Philipp Heckel <philipp.heckel@gmail.com>",
		"--vendor": "Philipp Heckel <philipp.heckel@gmail.com>",		
		"--url": "http://www.syncany.org/",
		"--description": 
"""
Syncany is an open-source cloud storage and filesharing application. 

It allows users to backup and share certain folders of their workstations
using any kind of storage. Syncany is open-source and provides data encryption
and incredible flexibility in terms of storage type and provider:

 - Data encryption: Syncany encrypts the files locally, so that any online 
   storage can be used even for sensitive data.
                   
 - Arbitrary storage: Syncany uses a plug-in based storage system. It can be
   used with any type of remote storage.
""",
		"--after-install": "${rootProject.projectDir}/gradle/fpm/postinst",
		"--before-remove": "${rootProject.projectDir}/gradle/fpm/prerm",
		"--exclude": "*.bat"
	] 
	filesArgs = ["."]
	force = true
}

debian.dependsOn installApp
rpm.dependsOn installApp


// Windows Installer ///////////////////////////////////////////////////////////

task exe(dependsOn: ["installApp"]) << {
	def innoSetupDir = new File("${buildDir}/innosetup")

	delete innoSetupDir	
	innoSetupDir.mkdir();	
	
	copy {
		from("${rootProject.projectDir}/gradle/innosetup/setup-left.bmp")
		from("${rootProject.projectDir}/gradle/innosetup/setup-top.bmp")
		from("${rootProject.projectDir}/gradle/innosetup/setup-info-before.rtf")		
		from("${rootProject.projectDir}/gradle/innosetup/setup-info-after.rtf")		
		from("${rootProject.projectDir}/gradle/innosetup/setup-icon.ico")		
		from("${rootProject.projectDir}/gradle/innosetup/modpath.iss")
		into(innoSetupDir)
	}

	copy {
		from("${rootProject.projectDir}/gradle/innosetup/setup.iss.skel")
		rename("setup.iss.skel", "setup.iss")
		expand([
			applicationVersion: "${applicationVersion}",
			applicationVersionFull: "${applicationVersionFull}",			
		])
		into(innoSetupDir)
	}

	exec {
		workingDir rootProject.projectDir
		commandLine "iscc ${innoSetupDir}/setup.iss".split()
	}
}


// CLI-specific Tasks //////////////////////////////////////////////////////////

String osName = System.getProperty("os.name").toLowerCase();

task fakeinstall(dependsOn: ["fakeuninstall"]) << {
	description = "Must be run as root: Makes syncany/sy command available everywhere (symlink to syncany-cli/build/..)"
	
	// Do not depend on :syncany-cli:installApp to avoid permission issues when 
	// running fakeinstall as "root"; manually calling installApp required
	
	if (osName.startsWith("windows")) {
		copy {
			from "../gradle/windows/syncany.bat"
			into System.getenv()["windir"]
			expand(appBinary: "${buildDir}/install/${applicationName}/bin/${applicationName}.bat")
		}
	}
	else{
    		ant.symlink(resource: "${buildDir}/install/${applicationName}/bin/${applicationName}", link: "/usr/local/bin/syncany")
    		ant.symlink(resource: "${buildDir}/install/${applicationName}/bin/${applicationName}", link: "/usr/local/bin/sy")
	}
}

task fakeuninstall << {
	description = "Must be run as root: Removes symlink for syncany/sy command (complement to fakeinstall)"

	if (osName.startsWith("windows")) {
		new File(System.getenv()["windir"] + "/syncany.bat").delete()
	}
	else {
		new File("/usr/local/bin/syncany").delete()
		new File("/usr/local/bin/sy").delete()
	}
}

task(runCli, dependsOn: "classes", type: JavaExec) {
	main = "org.syncany.Syncany"
	classpath = sourceSets.main.runtimeClasspath
}	
